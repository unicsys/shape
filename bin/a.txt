import csv
import re

def clean_acronym_csv(input_file, output_file):
    """
    Cleans a CSV file containing acronyms with encoding issues and extra commas.
    Handles fixed-width format where acronym takes first 16 characters.
    
    Args:
        input_file: Path to the input CSV file
        output_file: Path to the output CSV file
    """
    
    acronyms = []
    
    # Read the file with different encoding options to handle special characters
    encodings = ['utf-8', 'latin-1', 'cp1252', 'iso-8859-1']
    
    content = None
    for encoding in encodings:
        try:
            with open(input_file, 'r', encoding=encoding) as file:
                content = file.read()
            print(f"Successfully read file with {encoding} encoding")
            break
        except UnicodeDecodeError:
            continue
    
    if content is None:
        # If all encodings fail, read with error handling
        with open(input_file, 'r', encoding='utf-8', errors='replace') as file:
            content = file.read()
            print("Read file with UTF-8 encoding and error replacement")
    
    # Process the content as raw text, not CSV
    lines = content.split('\n')
    
    for line in lines:
        # Remove replacement characters (ï¿½) and other non-printable characters
        cleaned_line = re.sub(r'[^\x20-\x7E\n]', '', line)
        
        # Skip empty lines or lines with only commas/spaces
        if not cleaned_line.strip().replace(',', ''):
            continue
        
        # Remove trailing commas
        cleaned_line = cleaned_line.rstrip(',')
        
        # Skip if the line is now empty
        if not cleaned_line.strip():
            continue
        
        # Method 1: Fixed width format (first 16 characters for acronym)
        if len(cleaned_line) > 16:
            potential_acronym = cleaned_line[:16].strip()
            potential_full_form = cleaned_line[16:].strip().lstrip(',').strip()
            
            # Validate that we have an acronym and full form
            if potential_acronym and potential_full_form:
                # Check if acronym contains at least one letter or number
                if re.search(r'[A-Z0-9]', potential_acronym, re.IGNORECASE):
                    acronyms.append([potential_acronym, potential_full_form])
                    continue
        
        # Method 2: Look for double space separator (fallback)
        double_space_match = re.search(r'^(.+?)\s{2,}(.+)', cleaned_line)
        if double_space_match:
            acronym = double_space_match.group(1).strip()
            full_form = double_space_match.group(2).strip().lstrip(',').strip()
            
            if acronym and full_form:
                # Clean up acronym - remove trailing commas
                acronym = acronym.rstrip(',')
                if re.search(r'[A-Z0-9]', acronym, re.IGNORECASE):
                    acronyms.append([acronym, full_form])
                    continue
        
        # Method 3: Smart split - find where uppercase/special chars transition to regular text
        # This handles cases where there's no double space
        smart_match = None
        
        # Try to find a natural break point
        # Look for patterns like "ACRONYM Full description"
        patterns = [
            # Acronym ends, followed by space and lowercase word
            r'^([A-Z0-9\.\-\(\)\[\]&/\s,\']+?)\s+([a-z][a-zA-Z].+)',
            # Acronym ends, followed by space and uppercase word (but not all caps)
            r'^([A-Z0-9\.\-\(\)\[\]&/\s,\']+?)\s+([A-Z][a-z].+)',
            # Any clear transition from special chars to normal text
            r'^([^\s]+(?:\s+[^\s]+)*?)\s+(.{10,})',
        ]
        
        for pattern in patterns:
            smart_match = re.match(pattern, cleaned_line)
            if smart_match:
                acronym = smart_match.group(1).strip().rstrip(',')
                full_form = smart_match.group(2).strip().lstrip(',').strip()
                
                # Validate
                if acronym and full_form and len(full_form) > 3:
                    if re.search(r'[A-Z0-9]', acronym, re.IGNORECASE):
                        acronyms.append([acronym, full_form])
                        break
    
    # Remove duplicates while preserving order
    seen = set()
    unique_acronyms = []
    for item in acronyms:
        key = (item[0], item[1])
        if key not in seen:
            seen.add(key)
            unique_acronyms.append(item)
    
    # Write to output CSV
    with open(output_file, 'w', newline='', encoding='utf-8') as csvfile:
        writer = csv.writer(csvfile)
        
        # Write header
        writer.writerow(['Acronym', 'Full Form'])
        
        # Write data
        for row in unique_acronyms:
            writer.writerow(row)
    
    print(f"\nProcessed {len(unique_acronyms)} unique acronyms")
    print(f"Output saved to: {output_file}")
    
    # Display first few entries as preview
    print("\nFirst 10 entries:")
    for i, (acronym, full_form) in enumerate(unique_acronyms[:10]):
        print(f"  '{acronym}' -> '{full_form}'")
    
    return unique_acronyms

def clean_acronym_csv_from_string(csv_content, output_file):
    """
    Cleans CSV content provided as a string.
    Handles fixed-width format and various acronym formats.
    
    Args:
        csv_content: String containing the CSV data
        output_file: Path to the output CSV file
    """
    
    acronyms = []
    lines = csv_content.split('\n')
    
    for line in lines:
        # Remove non-ASCII characters and clean up
        cleaned_line = re.sub(r'[^\x20-\x7E\n]', '', line)
        
        # Skip empty lines
        if not cleaned_line.strip().replace(',', ''):
            continue
        
        # Remove trailing commas
        cleaned_line = cleaned_line.rstrip(',')
        
        if not cleaned_line.strip():
            continue
        
        # Method 1: Fixed width format (first 16 characters)
        if len(cleaned_line) > 16:
            potential_acronym = cleaned_line[:16].strip()
            potential_full_form = cleaned_line[16:].strip().lstrip(',').strip()
            
            if potential_acronym and potential_full_form:
                if re.search(r'[A-Z0-9]', potential_acronym, re.IGNORECASE):
                    acronyms.append([potential_acronym, potential_full_form])
                    continue
        
        # Method 2: Double space separator
        double_space_match = re.search(r'^(.+?)\s{2,}(.+)', cleaned_line)
        if double_space_match:
            acronym = double_space_match.group(1).strip().rstrip(',')
            full_form = double_space_match.group(2).strip().lstrip(',').strip()
            
            if acronym and full_form:
                if re.search(r'[A-Z0-9]', acronym, re.IGNORECASE):
                    acronyms.append([acronym, full_form])
                    continue
        
        # Method 3: Smart split
        patterns = [
            r'^([A-Z0-9\.\-\(\)\[\]&/\s,\']+?)\s+([a-z][a-zA-Z].+)',
            r'^([A-Z0-9\.\-\(\)\[\]&/\s,\']+?)\s+([A-Z][a-z].+)',
            r'^([^\s]+(?:\s+[^\s]+)*?)\s+(.{10,})',
        ]
        
        for pattern in patterns:
            smart_match = re.match(pattern, cleaned_line)
            if smart_match:
                acronym = smart_match.group(1).strip().rstrip(',')
                full_form = smart_match.group(2).strip().lstrip(',').strip()
                
                if acronym and full_form and len(full_form) > 3:
                    if re.search(r'[A-Z0-9]', acronym, re.IGNORECASE):
                        acronyms.append([acronym, full_form])
                        break
    
    # Remove duplicates
    seen = set()
    unique_acronyms = []
    for item in acronyms:
        key = (item[0], item[1])
        if key not in seen:
            seen.add(key)
            unique_acronyms.append(item)
    
    # Write to output CSV
    with open(output_file, 'w', newline='', encoding='utf-8') as csvfile:
        writer = csv.writer(csvfile)
        writer.writerow(['Acronym', 'Full Form'])
        writer.writerows(unique_acronyms)
    
    return unique_acronyms

# Test function to demonstrate handling of special cases
def test_special_acronyms():
    """
    Test function to verify handling of special acronym formats
    """
    # Simulating fixed-width format (16 chars for acronym)
    test_data = """TEC             Turbine Exhaust Case,,,,,,,
3M              Minnesota Mining and Manufacturing,,,,,,,
(A)             Appendix,,,,,,,
A-W             Air to Water,,,,,,,
(A/N)           Alphanumeric,,,,,,,
A & C/O         Accounts and Care Of,,,,,,,
ABC             Advanced Base Camp,,,,,,,
A/C             Air Conditioning,,,,,,,
C/O             Care Of,,,,,,,
A.B.            Artium Baccalaureus,,,,,,,
AST-4           Advanced System Type 4,,,,,,,
'TFB            Turbofan Blade,,,,,,,
TFB, TFBB       Turbofan Blade Models,,,,,,,
U.S.A.          United States of America,,,,,,,
A & C C/O       Assembly & Checkout,,,,,,,"""
    
    print("Testing fixed-width format (16 characters):")
    print("-" * 60)
    
    result = clean_acronym_csv_from_string(test_data, "test_fixed_width.csv")
    
    print("\nExtracted acronyms:")
    for acronym, full_form in result:
        print(f"  '{acronym}' -> '{full_form}'")
    
    print(f"\nTotal extracted: {len(result)} acronyms")
    
    # Test with double-space format
    test_data_double_space = """TEC  Turbine Exhaust Case
3M  Minnesota Mining and Manufacturing
A & C C/O  Assembly & Checkout
AST-4  Advanced System Type 4
A.B.C.  Always Be Closing"""
    
    print("\n" + "=" * 60)
    print("Testing double-space format:")
    print("-" * 60)
    
    result2 = clean_acronym_csv_from_string(test_data_double_space, "test_double_space.csv")
    
    print("\nExtracted acronyms:")
    for acronym, full_form in result2:
        print(f"  '{acronym}' -> '{full_form}'")
    
    return result, result2

def analyze_file_format(input_file, num_lines=20):
    """
    Analyzes the format of the input file to understand its structure.
    
    Args:
        input_file: Path to the input file
        num_lines: Number of lines to analyze
    """
    print(f"Analyzing format of '{input_file}'...")
    print("=" * 60)
    
    try:
        with open(input_file, 'r', encoding='utf-8', errors='replace') as file:
            lines = file.readlines()[:num_lines]
        
        for i, line in enumerate(lines, 1):
            # Clean the line
            cleaned = re.sub(r'[^\x20-\x7E\n]', '', line).rstrip(',')
            
            if cleaned.strip():
                print(f"Line {i}:")
                print(f"  Raw: {repr(cleaned[:60])}...")
                
                # Check if it fits 16-char format
                if len(cleaned) > 16:
                    acronym_part = cleaned[:16]
                    full_form_part = cleaned[16:].strip()
                    print(f"  16-char split: '{acronym_part.strip()}' | '{full_form_part[:40]}...'")
                
                # Check for double spaces
                if '  ' in cleaned:
                    parts = re.split(r'\s{2,}', cleaned, 1)
                    if len(parts) == 2:
                        print(f"  Double-space split: '{parts[0]}' | '{parts[1][:40]}...'")
                
                print()
        
    except FileNotFoundError:
        print(f"File '{input_file}' not found.")

# Main execution
if __name__ == "__main__":
    # Run test first
    print("=== Running Format Tests ===\n")
    test_special_acronyms()
    
    print("\n" + "=" * 60)
    print("=== Processing Main File ===\n")
    
    # Process actual file
    input_file = "acronyms_raw.csv"  # Replace with your input file name
    output_file = "acronyms_clean.csv"  # Replace with desired output file name
    
    # First, analyze the file format
    print("Do you want to analyze the file format first? (y/n)")
    # For automated running, skip this
    # analyze_file_format(input_file)
    
    try:
        # Process the file
        result = clean_acronym_csv(input_file, output_file)
        
        print(f"\nâ Successfully created clean CSV with {len(result)} entries")
        
        # Show examples of complex formats if found
        complex_examples = []
        for acronym, full_form in result:
            if any(char in acronym for char in ['.', '-', '&', '/', '(', ')']):
                complex_examples.append((acronym, full_form))
                if len(complex_examples) >= 5:
                    break
        
        if complex_examples:
            print("\nExamples of complex acronyms found:")
            for acronym, full_form in complex_examples:
                print(f"  '{acronym}' -> '{full_form}'")
        
    except FileNotFoundError:
        print(f"â Error: Could not find input file '{input_file}'")
        print("\nPlease make sure the file exists and update the file path.")
        
        # Example with problematic format
        print("\n--- Testing with your example ---")
        sample_data = """A & C C/O       Assembly & Checkout,,,,,,,
TEC             Turbine Exhaust Case,,,,,,,
AST-4           Advanced System Type 4,,,,,,,
A.B.C.          Always Be Closing,,,,,,,"""
        
        result = clean_acronym_csv_from_string(sample_data, "sample_output.csv")
        print(f"Created sample output with {len(result)} entries")
        
        print("\nExtracted entries:")
        for acronym, full_form in result:
            print(f"  '{acronym}' -> '{full_form}'")
